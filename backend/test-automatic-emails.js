import dotenv from 'dotenv';
import mongoose from 'mongoose';
import Order from './models/Order.js';

dotenv.config();

console.log('üß™ PRUEBA DE EMAILS AUTOM√ÅTICOS EN ENDPOINTS\n');

async function testAutomaticEmails() {
  try {
    // Conectar a MongoDB
    console.log('üì° Conectando a MongoDB...');
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Conectado a MongoDB\n');

    // Buscar una orden existente para probar cambios de estado
    console.log('üìã Buscando orden existente para pruebas...');
    const existingOrder = await Order.findOne().sort({ createdAt: -1 });
    
    if (!existingOrder) {
      console.log('‚ùå No se encontraron √≥rdenes existentes');
      console.log('üí° Crea una orden desde el frontend primero');
      await mongoose.disconnect();
      return;
    }

    console.log(`üìä Orden encontrada para pruebas:`);
    console.log(`   ID: ${existingOrder.id}`);
    console.log(`   Estado actual: ${existingOrder.status}`);
    console.log(`   Cliente: ${existingOrder.customerName}`);
    console.log(`   Email: ${existingOrder.customerEmail}`);
    
    // Verificar que tenga email
    if (!existingOrder.customerEmail) {
      console.log('‚ùå Esta orden no tiene email del cliente');
      console.log('üí° Usa una orden que tenga email para probar');
      await mongoose.disconnect();
      return;
    }

    console.log('\nüîß CONFIGURACI√ìN VERIFICADA:');
    console.log(`   SENDGRID_API_KEY: ${process.env.SENDGRID_API_KEY ? '‚úÖ Configurada' : '‚ùå No configurada'}`);
    console.log(`   MAIL_FROM: ${process.env.MAIL_FROM || 'No configurado'}`);
    
    console.log('\nüìß ENDPOINTS QUE AHORA ENV√çAN EMAILS AUTOM√ÅTICAMENTE:');
    console.log('   ‚úÖ POST /api/orders - Email de confirmaci√≥n');
    console.log('   ‚úÖ PATCH /api/orders/:id/status - Email de cambio de estado');
    console.log('   ‚úÖ PATCH /api/orders/:id/confirm-weights - Email "Listo"');
    console.log('   ‚úÖ PATCH /api/orders/:id/validate-receipt - Email de pago confirmado');
    
    console.log('\nüöÄ PARA PROBAR LOS EMAILS AUTOM√ÅTICOS:');
    console.log('\n1Ô∏è‚É£ CREAR NUEVO PEDIDO:');
    console.log('   - Ve al frontend y crea un pedido con email');
    console.log('   - Deber√≠as recibir email de confirmaci√≥n autom√°ticamente');
    
    console.log('\n2Ô∏è‚É£ CAMBIAR ESTADO DE PEDIDO:');
    console.log(`   - Cambia el estado de la orden ${existingOrder.id} a "En preparaci√≥n"`);
    console.log('   - Deber√≠as recibir email de actualizaci√≥n autom√°ticamente');
    
    console.log('\n3Ô∏è‚É£ MARCAR COMO LISTO:');
    console.log(`   - Usa el endpoint confirm-weights para marcar ${existingOrder.id} como "Listo"`);
    console.log('   - Deber√≠as recibir email de "Pedido listo" autom√°ticamente');
    
    console.log('\n4Ô∏è‚É£ APROBAR PAGO:');
    console.log(`   - Si ${existingOrder.id} tiene comprobante, apru√©balo`);
    console.log('   - Deber√≠as recibir email de "Pago confirmado" autom√°ticamente');

    console.log('\nüìù LOGS A REVISAR:');
    console.log('   - Revisa la consola del backend cuando hagas cambios');
    console.log('   - Deber√≠as ver logs como:');
    console.log('     üîç ===== ENVIANDO EMAIL DE CONFIRMACI√ìN =====');
    console.log('     üìß Enviando email de confirmaci√≥n a: email@ejemplo.com');
    console.log('     ‚úÖ Email de confirmaci√≥n enviado exitosamente');

    await mongoose.disconnect();
    console.log('\n‚úÖ Verificaci√≥n completada');
    console.log('\nüéØ RESUMEN: Los emails autom√°ticos est√°n ahora integrados en las rutas.');
    console.log('üéØ Prueba creando/modificando pedidos para ver los emails en acci√≥n.');

  } catch (error) {
    console.error('‚ùå Error en verificaci√≥n:', error.message);
    try {
      await mongoose.disconnect();
    } catch (disconnectError) {
      console.error('Error desconectando:', disconnectError);
    }
  }
}

// Ejecutar verificaci√≥n
testAutomaticEmails();
